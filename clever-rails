#!/bin/bash

# Clever Rails App Generator
# Usage: clever-rails new <app_name> <template_type>
# Example: clever-rails new myapp api
# Example: clever-rails new myapp fullstack

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to show usage
show_usage() {
    cat << EOF
${BLUE}Clever Rails App Generator${NC}

Usage: clever-rails new <app_name> <template_type>

Template Types:
  ${GREEN}api${NC}        - API-only Rails application
  ${GREEN}fullstack${NC}  - Full-stack Rails application with Hotwire

Examples:
  clever-rails new my_api_app api
  clever-rails new my_web_app fullstack

Features included in both templates:
  • PostgreSQL database
  • Solid Queue for background jobs
  • RSpec with FactoryBot and VCR (Rails test framework skipped)
  • GitHub Actions CI/CD
  • Code coverage with SimpleCov
  • Security scanning with Brakeman
  • Code linting with RuboCop
  • Heroku deployment ready
  • Kamal automatically skipped

Additional features in fullstack template:
  • Hotwire (Stimulus + Turbo) 
  • esbuild for fast JavaScript bundling (replaces importmaps)
  • Yarn package manager (required)
  • Tailwind CSS
  • Site Prism for system testing
  • Capybara with Selenium
  • Node.js + Yarn required
EOF
}

# Check if we have the right number of arguments
if [ "$#" -lt 3 ]; then
    print_error "Insufficient arguments provided"
    echo
    show_usage
    exit 1
fi

# Parse arguments
COMMAND="$1"
APP_NAME="$2"
TEMPLATE_TYPE="$3"

# Validate command
if [ "$COMMAND" != "new" ]; then
    print_error "Only 'new' command is supported"
    echo
    show_usage
    exit 1
fi

# Validate app name
if [ -z "$APP_NAME" ]; then
    print_error "App name cannot be empty"
    exit 1
fi

# Check if directory already exists
if [ -d "$APP_NAME" ]; then
    print_error "Directory '$APP_NAME' already exists"
    exit 1
fi

# Get the directory where this script is actually located (resolve symlinks)
if [ -L "${BASH_SOURCE[0]}" ]; then
    # Script is a symlink, follow it to the real location
    REAL_SCRIPT="$(readlink "${BASH_SOURCE[0]}")"
    # Handle relative symlinks
    if [[ "$REAL_SCRIPT" != /* ]]; then
        REAL_SCRIPT="$(dirname "${BASH_SOURCE[0]}")/$REAL_SCRIPT"
    fi
    SCRIPT_DIR="$(cd "$(dirname "$REAL_SCRIPT")" && pwd)"
else
    # Script is not a symlink
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

# Get the current working directory (where user wants to create the app)
CURRENT_DIR="$(pwd)"

# Check if we're running from inside the template directory
if [ "$CURRENT_DIR" = "$SCRIPT_DIR" ]; then
    print_error "Cannot create Rails app inside the template directory"
    print_info "Please run this script from the directory where you want to create your app"
    print_info "Example: cd ~/Projects && /path/to/clever-rails new myapp api"
    exit 1
fi

# Validate template type and set appropriate flags
case "$TEMPLATE_TYPE" in
    "api")
        TEMPLATE_FILE="$SCRIPT_DIR/api_template.rb"
        RAILS_FLAGS="--api"
        DESCRIPTION="API-only"
        ;;
    "fullstack")
        TEMPLATE_FILE="$SCRIPT_DIR/fullstack_template.rb"
        RAILS_FLAGS="--javascript=esbuild"
        DESCRIPTION="fullstack"
        ;;
    *)
        print_error "Invalid template type: $TEMPLATE_TYPE"
        echo
        show_usage
        exit 1
        ;;
esac

# Check if template file exists
if [ ! -f "$TEMPLATE_FILE" ]; then
    print_error "Template file not found: $TEMPLATE_FILE"
    exit 1
fi

# Check if Rails is installed
if ! command -v rails &> /dev/null; then
    print_error "Rails is not installed. Please install Rails first:"
    echo "gem install rails"
    exit 1
fi

# Check if PostgreSQL tools are available (optional check)
if ! command -v psql &> /dev/null; then
    print_warning "PostgreSQL client (psql) not found. Make sure PostgreSQL is installed and running."
fi

# Check if Node.js and Yarn are available for fullstack template
if [ "$TEMPLATE_TYPE" = "fullstack" ]; then
    if ! command -v node &> /dev/null; then
        print_error "Node.js is required for fullstack template with esbuild. Please install Node.js first."
        exit 1
    fi
    
    # Require Yarn specifically
    if ! command -v yarn &> /dev/null; then
        print_error "Yarn is required for fullstack template. Please install Yarn first:"
        echo "npm install -g yarn"
        exit 1
    fi
    
    PACKAGE_MANAGER="yarn"
    print_info "Using Yarn for JavaScript package management"
fi

# Show what we're about to do
print_info "Creating $DESCRIPTION Rails application: $APP_NAME"
print_info "Template: $TEMPLATE_FILE"
print_info "Rails flags: $RAILS_FLAGS --database=postgresql --skip-kamal --skip-test --skip-brakeman --skip-solid --skip-ci --skip-rubocop"

echo
read -p "Continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_info "Cancelled"
    exit 0
fi

# Build the Rails command
RAILS_CMD="rails new \"$APP_NAME\" $RAILS_FLAGS --database=postgresql --skip-kamal --skip-test --skip-brakeman --skip-solid --skip-ci --skip-rubocop -m \"$TEMPLATE_FILE\""

# Show the command we're running
print_info "Running: $RAILS_CMD"
echo

# Execute the Rails command
eval $RAILS_CMD

# Check if the command was successful
if [ $? -eq 0 ]; then
    echo
    print_success "$DESCRIPTION Rails application '$APP_NAME' created successfully!"
    echo
    print_info "Next steps:"
    echo "  1. cd $APP_NAME"
    echo "  2. Make sure PostgreSQL is running"
    if [ "$TEMPLATE_TYPE" = "fullstack" ]; then
        echo "  3. Install JavaScript dependencies: yarn install" 
        echo "  4. Run: ./bin/dev (starts Rails + esbuild + Tailwind)"
        echo "  5. Visit: http://localhost:3000"
        echo "  6. Run tests: bundle exec rspec"
        echo "  7. Push to GitHub to trigger CI/CD"
    else
        echo "  3. Run: rails server"
        echo "  4. Test API: curl http://localhost:3000/api/v1/health"
        echo "  5. Run tests: bundle exec rspec"
        echo "  6. Push to GitHub to trigger CI/CD"
    fi
else
    print_error "Failed to create Rails application"
    exit 1
fi